= content_for :title, "Faça Acontecer: "
.row[ng-controller='SubscriptionCtrl']
  section.form-wrap
    header
    .subscription-form.large-12.columns
      = simple_form_for @user, html: { "data-abide" => true } do |usr|

        //pre
          = @user.errors.messages.inspect
        //pre
          = params[:user].inspect
        article.user-personal-info.row
          // @subscriber
          // Personal fields for the subscriber
          .large-12.columns
            h3.text-center Insira seus dados pessoais
          .large-3.columns= usr.input :first_name, input_html: { required: true } 
          .large-3.columns= usr.input :last_name, input_html: { required: true }
          .large-3.columns= usr.input :cpf, input_html: { class: 'cpf-mask', required: true  }
          .large-3.columns= usr.input :birthday, as: :string, input_html: { class: 'date-mask', required: true }
          .large-5.columns= usr.input :email, input_html: { required: true }
          .large-3.columns.end= usr.input :phone, input_html: { class: 'phone-mask', required: true }


        = usr.simple_fields_for :subscriptions do |sub|
          article.subcription-donation-info.row
            // @subscription
            // Subscription options
            .large-12.columns
              h3.text-center Que tipo de doação deseja efetuar?
            dl.tabs[data-tab]
              dd.active.monthly-tab
                = link_to "Doação Mensal", "#monthly"
              dd.biannual-tab
                = link_to "Doação Semestral", "#biannual"
              dd.annual-tab
                = link_to "Doação Anual", "#annual"
      
            // All these helpers methods are located @ application_helper
            div.tabs-content
              #monthly.content.active
                .interval-info.pulse
                  h4 Info mensal
                  p
                    |Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. 
                .monthly.subscription-values
                  = sub.input :value, as: :radio_buttons, label_field: false, collection: available_monthly_plans
    
              #biannual.content
                .interval-info
                  h4 Info semestral
                  p
                    |Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. 
                .biannual.subscription-values
                  = sub.input :value, as: :radio_buttons, label_field: false, collection: available_biannual_plans

              #annual.content
                .interval-info
                  h4 Info anual
                  p
                    |Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. 
                .annual.subscription-values
                  = sub.input :value, as: :radio_buttons, label_field: false, collection: available_annual_plans
              .hidden.subscription-plan
                = sub.input :plan, as: :select, collection: available_subscription_intervals


              .subscription-project
                = sub.input :project_id, as: :hidden, input_html: { value: Project.first.id }

          article.subscription-payment-options.row
            // @subscription
            // Where the user chooses between CREDIT CARD/ SLIP / BANK ACCOUNT
            .large-12.columns
              h3.text-center
                |Qual a forma de pagamento?

              // available_payment_options: application_helper
              .text-center= sub.input :payment_option, as: :radio_buttons, collection: available_payment_options, input_html: { required: true }



          article.subscription-payment-fields.debit.hidden.row
            .debit-wrap.text-center
              .large-12.columns
                h3 Qual o seu banco?
              .debit-fields
                .large-12.columns
                  = sub.input :bank, as: :radio_buttons, label: false, item_wrapper_class: "bank1", collection: available_payment_banks
                  = sub.full_error :bank



        article.subscription-payment-fields.creditcard.hidden.row
          // @subscription
          // If there are any required payment fields (like Account holder for Credit Card)
          .card-wrap
            .large-12.columns.text-center
              h3 Dados do cartão
            .card-fields
              = usr.simple_fields_for :creditcard do |credit|
                .large-5.columns= credit.input :holder
                .large-5.columns= credit.input :cardnumber, input_html: { class: 'creditcard-mask' }
                .large-2.columns.end= credit.input :expiration, input_html: { class: 'expiration-mask' }





        article.user-address-info.row
          // @subscriber
          // Address info for the subscriber
          .large-12.columns
            h3.text-center
              | &nbsp;
          .large-12.columns
            .row
              .large-3.columns
                = usr.input :zipcode, input_html: { required: true, class: 'zipcode-mask', "ng-model" => "zipcode", "ng-blur" => 'getZipcodeData()' } 


          .large-5.columns= usr.input :address_street, input_html: { required: true, "ng-model" => "address_street" }
          .large-2.columns= usr.input :address_number, input_html: { required: true }
          .large-4.columns= usr.input :address_extra, input_html: { required: true }
          .large-3.columns= usr.input :address_district, input_html: { required: true, "ng-model" => "address_district" }
          .large-3.columns= usr.input :city, input_html: { required: true, "ng-model" => "city" }
          
            
          // address_states located @ application_helper
          .large-3.columns.end= usr.input :state, as: :select, collection: address_states, prompt: 'Selecione...', input_html: { "ng-model" => "state" }

          .hidden.country
            = usr.input :country, as: :string, input_html: { value: 'BRA' }
        footer.button-action.row
          .large-4.large-centered.columns
            = usr.submit "Contribuir!", class: :animated, data: { disable_with: 'Aguarde...' }

javascript:
  // Saving references in order to use it with jQuery 
  // See application.js file.
  // DO NOT ALTER the value of  .last
  window.$zipcode   = "#{@user.zipcode}";
  window.$value     = "#{@user.subscriptions.last.value.to_i}";
  window.$payment   = "#{@user.subscriptions.last.payment_option}";
  window.$plan      = "#{@user.subscriptions.last.plan}"
